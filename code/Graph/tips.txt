网络流中为了限制点的访问次数，可以将每个点分割成2个点<i.a>和<i.b>。然后在这2个点之间连上界为访问次数的边。欲将i,j连边即将<i.b>与<j.a>相连。建立二分图去做。
如果涉及到点权，可以转化为边权，若是不行，也可按此法分割点，然后连上上界无穷大，费用为点权的边，而题目中的其他限制则是用上界控制，而费用为0。做最小（大）费用最大流即可。

有些问题叫你求最大值，但有一些限制，比如相邻的不能取，那么建立二分图，将相邻的连边，即将那些题目说不能的都连上，然后求出最小割，这样这些边都被割开了，两个集合分开了，不会产生任何矛盾，剩下的就都取了。接着ans就是全部的值-最小割，而最小割=最大流，只要求最大流就行了。
算法就是将所有矛盾关系化为二分图中的边，然后最大流=最小割，再用所有关系的和-最小割，保证了矛盾关系不被建立。
当然最小覆盖点集就是最小割了，因为二分图中一对矛盾关系中只能取一个，于是S→x=a[x],y→T=a[y],x→y=oo;这样得到的就是最小的那条边，最后减的也是他。

【1】
求：割边最少的割集中的权值最小的割

每条边的权值w=w+maxw*m
做一遍最大流

原因：这样边权变换后多一条边一定亏


【2】
求：权值最小的割集中割边最少的割

方法1：每条边的权值w=w*(m+1)+1
这样得到最大流=maxflow div (m+1),最少割边数=maxflow mod (m+1)

原因：如果原先两个割都是最小割，那么求出的最大流相等，但边权变换后只有边数小的才是最小割了。
乘(m+1)是为了保证边数叠加后依然是余数，不至于影响求最小割的结果.

方法2：建图，得到最大流后，图中边若满流，说明该边是最小割上的边
再建图，原则：满流的边改为容量为1的边，删除未满流的边，然后最大流即答案

原因：两个结论：
1.满流边一定是某个最小割的边
2.最小割集的边集中任取一个割一定也满足最小割


【3】
求：权值最小的割集中费用最少的割

由【2】的方法2得到启发。最大流后取出满流边，以费用为容量做一次最大流。

原因同【2】

推广：【2】是【3】的特例，即【2】的费用为1


【4】
求：费用最少的割集中权值最小的割

做法同【3】，将费用看做权值，权值看做费用。真相是就是两个关键字。


【5】
求：三个关键字最小的割

不会


【6】
求：权值最小的割集中割边最少的割集中字典序最小的割

是【5】的特例。解题报告：http://hi.baidu.com/mengyun1993/blog/item/c30d193c9a85932870cf6cda.html